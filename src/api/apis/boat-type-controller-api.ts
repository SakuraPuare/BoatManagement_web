// tslint:disable
/**
 * 基于物联网的共享智能电动游船管理平台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BoatType } from '../models';
// @ts-ignore
import { PageBoatType } from '../models';
/**
 * BoatTypeControllerApi - axios parameter creator
 * @export
 */
export const BoatTypeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getInfo_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo6: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInfo6.');
            }
            const localVarPath = `/boatTypes/getInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInfo_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo6_1: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInfo6_1.');
            }
            const localVarPath = `/boatTypes/getInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_6
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list6: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_6
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list6_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary page_6
         * @param {Array<BoatType>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page6: async (records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (records) {
                localVarQueryParameter['records'] = records;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (totalPage !== undefined) {
                localVarQueryParameter['totalPage'] = totalPage;
            }

            if (totalRow !== undefined) {
                localVarQueryParameter['totalRow'] = totalRow;
            }

            if (optimizeCountQuery !== undefined) {
                localVarQueryParameter['optimizeCountQuery'] = optimizeCountQuery;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary page_6
         * @param {Array<BoatType>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page6_3: async (records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (records) {
                localVarQueryParameter['records'] = records;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (totalPage !== undefined) {
                localVarQueryParameter['totalPage'] = totalPage;
            }

            if (totalRow !== undefined) {
                localVarQueryParameter['totalRow'] = totalRow;
            }

            if (optimizeCountQuery !== undefined) {
                localVarQueryParameter['optimizeCountQuery'] = optimizeCountQuery;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove6: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove6.');
            }
            const localVarPath = `/boatTypes/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove6_4: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove6_4.');
            }
            const localVarPath = `/boatTypes/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save6: async (boatType?: BoatType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/save`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boatType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boatType !== undefined ? boatType : {}) : (boatType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save6_5: async (boatType?: BoatType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/save`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boatType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boatType !== undefined ? boatType : {}) : (boatType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6: async (boatType?: BoatType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boatType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boatType !== undefined ? boatType : {}) : (boatType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6_6: async (boatType?: BoatType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boatTypes/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boatType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boatType !== undefined ? boatType : {}) : (boatType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoatTypeControllerApi - functional programming interface
 * @export
 */
export const BoatTypeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getInfo_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo6(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoatType>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).getInfo6(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getInfo_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo6_1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoatType>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).getInfo6_1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list_6
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list6(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoatType>>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).list6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list_6
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list6_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoatType>>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).list6_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary page_6
         * @param {Array<BoatType>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page6(records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoatType>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).page6(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary page_6
         * @param {Array<BoatType>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page6_3(records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoatType>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).page6_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove6(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).remove6(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove6_4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).remove6_4(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary save_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save6(boatType?: BoatType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).save6(boatType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary save_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save6_5(boatType?: BoatType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).save6_5(boatType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update6(boatType?: BoatType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).update6(boatType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update6_6(boatType?: BoatType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatTypeControllerApiAxiosParamCreator(configuration).update6_6(boatType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BoatTypeControllerApi - factory interface
 * @export
 */
export const BoatTypeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getInfo_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo6(id: number, options?: any): AxiosPromise<BoatType> {
            return BoatTypeControllerApiFp(configuration).getInfo6(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInfo_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo6_1(id: number, options?: any): AxiosPromise<BoatType> {
            return BoatTypeControllerApiFp(configuration).getInfo6_1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_6
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list6(options?: any): AxiosPromise<Array<BoatType>> {
            return BoatTypeControllerApiFp(configuration).list6(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_6
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list6_2(options?: any): AxiosPromise<Array<BoatType>> {
            return BoatTypeControllerApiFp(configuration).list6_2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary page_6
         * @param {Array<BoatType>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page6(records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): AxiosPromise<PageBoatType> {
            return BoatTypeControllerApiFp(configuration).page6(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary page_6
         * @param {Array<BoatType>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page6_3(records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): AxiosPromise<PageBoatType> {
            return BoatTypeControllerApiFp(configuration).page6_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove6(id: number, options?: any): AxiosPromise<boolean> {
            return BoatTypeControllerApiFp(configuration).remove6(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove_6
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove6_4(id: number, options?: any): AxiosPromise<boolean> {
            return BoatTypeControllerApiFp(configuration).remove6_4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save6(boatType?: BoatType, options?: any): AxiosPromise<boolean> {
            return BoatTypeControllerApiFp(configuration).save6(boatType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save6_5(boatType?: BoatType, options?: any): AxiosPromise<boolean> {
            return BoatTypeControllerApiFp(configuration).save6_5(boatType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6(boatType?: BoatType, options?: any): AxiosPromise<boolean> {
            return BoatTypeControllerApiFp(configuration).update6(boatType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_6
         * @param {BoatType} [boatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6_6(boatType?: BoatType, options?: any): AxiosPromise<boolean> {
            return BoatTypeControllerApiFp(configuration).update6_6(boatType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoatTypeControllerApi - object-oriented interface
 * @export
 * @class BoatTypeControllerApi
 * @extends {BaseAPI}
 */
export class BoatTypeControllerApi extends BaseAPI {
    /**
     * 
     * @summary getInfo_6
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public getInfo6(id: number, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).getInfo6(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInfo_6
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public getInfo6_1(id: number, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).getInfo6_1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public list6(options?: any) {
        return BoatTypeControllerApiFp(this.configuration).list6(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public list6_2(options?: any) {
        return BoatTypeControllerApiFp(this.configuration).list6_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary page_6
     * @param {Array<BoatType>} [records] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [totalPage] 
     * @param {number} [totalRow] 
     * @param {boolean} [optimizeCountQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public page6(records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).page6(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary page_6
     * @param {Array<BoatType>} [records] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [totalPage] 
     * @param {number} [totalRow] 
     * @param {boolean} [optimizeCountQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public page6_3(records?: Array<BoatType>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).page6_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove_6
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public remove6(id: number, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).remove6(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove_6
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public remove6_4(id: number, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).remove6_4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save_6
     * @param {BoatType} [boatType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public save6(boatType?: BoatType, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).save6(boatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save_6
     * @param {BoatType} [boatType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public save6_5(boatType?: BoatType, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).save6_5(boatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_6
     * @param {BoatType} [boatType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public update6(boatType?: BoatType, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).update6(boatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_6
     * @param {BoatType} [boatType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatTypeControllerApi
     */
    public update6_6(boatType?: BoatType, options?: any) {
        return BoatTypeControllerApiFp(this.configuration).update6_6(boatType, options).then((request) => request(this.axios, this.basePath));
    }

}
