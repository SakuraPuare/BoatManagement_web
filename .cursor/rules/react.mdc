---
description: 
globs: 
alwaysApply: true
---
# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# role

作为一个前端设计师，你正在从事 船舶管理系统 的开发

本项目使用 react nextjs tailwindcss sonner lucide-react 技术栈开发

# component

[data-table.tsx](mdc:src/components/data-table.tsx) 是我们自己封装的数据表格 使用示例如下

```page.tsx
"use client";

import { DataTable } from "@/components/data-table";
import { Badge } from "@/components/ui/badge";
import {
  adminAddAreas,
  adminCreate,
  adminDeleteAreas,
  adminGetAdminListPageQuery,
} from "@/services/api/adminController";

import { Filter, Page } from "@/types";
import { ActiveStatus } from "@/types/enum";
import { zodResolver } from "@hookform/resolvers/zod";
import { ColumnDef } from "@tanstack/react-table";
import { formatDate } from "date-fns";
import { Ban, MapPin, UserRoundCog } from "lucide-react";
import { useCallback, useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import {
  AddAdminDialog,
  addAdminForm,
  AdminFormValues,
  defaultAdminValues,
} from "./add-dialog";
import { ManageRegionsDialog } from "./manage-regions-dialog";

export default function AdminsPage() {
  // State for data table
  const [isLoading, setIsLoading] = useState(false);
  const [page, setPage] = useState<Page>({
    pageNumber: 1,
    pageSize: 10,
  });
  const [filter, setFilter] = useState<Filter<API.AdminUserVO>>({
    filter: {},
    filterOptions: [
      {
        id: "status",
        label: "状态",
        placeholder: (
          <div className="flex flex-row items-center gap-2">
            <UserRoundCog className="w-4 h-4" />
            <span>状态 筛选</span>
          </div>
        ),
        options: [
          {
            label: "启用",
            value: ActiveStatus.ACTIVE,
          },
          {
            label: "禁用",
            value: ActiveStatus.INACTIVE,
          },
        ],
      },
    ],
    search: null,
    sort: null,
    startDateTime: null,
    endDateTime: null,
  });
  const [admins, setAdmins] = useState<API.AdminUserVO[]>([]);

  // State for add admin dialog
  const [addAdminDialogOpen, setAddAdminDialogOpen] = useState(false);

  // State for manage regions dialog
  const [manageRegionsDialogOpen, setManageRegionsDialogOpen] = useState(false);
  const [selectedAdmin, setSelectedAdmin] = useState<API.AdminUserVO | null>(
    null,
  );

  // Create form methods
  const formMethods = useForm<AdminFormValues>({
    resolver: zodResolver(addAdminForm),
    defaultValues: defaultAdminValues,
  });

  // Fetch admins data
  const fetchAdmins = useCallback(async () => {
    setIsLoading(true);
    try {
      const res = await adminGetAdminListPageQuery(
        {
          pageNum: page.pageNumber,
          pageSize: page.pageSize,
          ...(filter.search && { search: filter.search }),
          ...(filter.sort && { sort: filter.sort }),
          ...(filter.startDateTime && { startDateTime: filter.startDateTime }),
          ...(filter.endDateTime && { endDateTime: filter.endDateTime }),
        },
        filter.filter,
      );

      setPage({
        pageNumber: res.data?.pageNumber || 1,
        pageSize: res.data?.pageSize || 10,
        totalPage: res.data?.totalPage,
        totalRow: res.data?.totalRow,
      });

      setAdmins(res.data?.records || []);
    } catch (error) {
      console.error("Failed to fetch admins:", error);
    } finally {
      setIsLoading(false);
    }
  }, [filter, page.pageNumber, page.pageSize]);

  // Load data on component mount and when dependencies change
  useEffect(() => {
    fetchAdmins();
  }, [fetchAdmins]);

  // Handle admin creation form submission
  const handleSubmit = async (data: AdminFormValues) => {
    setIsLoading(true);
    try {
      // Create the final data object
      const finalData = {
        username: data.username,
        password: data.password,
        status: data.status,
      };

      // Call API to create the admin
      await adminCreate(finalData);

      toast.success("管理员创建成功");

      // Reset form and close dialog
      formMethods.reset(defaultAdminValues);
      setAddAdminDialogOpen(false);

      // Refresh the admin list
      fetchAdmins();
    } catch (error) {
      console.error("Failed to create admin:", error);
      toast.error("创建管理员失败");
    } finally {
      setIsLoading(false);
    }
  };

  // Handle adding a region to an admin
  const handleAddRegion = async (adminId: number, regionCode: string) => {
    setIsLoading(true);
    try {
      const response = await adminAddAreas({
        id: adminId,
        areaIds: regionCode,
      });

      toast.success("区域添加成功");

      // Refresh the admin list
      fetchAdmins();
    } catch (error) {
      console.error("Failed to add region:", error);
      toast.error("添加区域失败");
    } finally {
      setIsLoading(false);
    }
  };

  // Handle removing a region from an admin
  const handleRemoveRegion = async (adminId: number, regionIds: string) => {
    setIsLoading(true);
    try {
      const response = await adminDeleteAreas({
        id: adminId,
        areaIds: regionIds,
      });

      toast.success("区域删除成功");

      // Refresh the admin list
      fetchAdmins();

      // Update the selected admin
      const updatedAdmin = admins.find((admin) => admin.id === adminId);
      if (updatedAdmin) {
        setSelectedAdmin(updatedAdmin);
      }
    } catch (error) {
      console.error("Failed to remove region:", error);
      toast.error("删除区域失败");
    } finally {
      setIsLoading(false);
    }
  };

  // Open the manage regions dialog for a specific admin
  const openManageRegionsDialog = (admin: API.AdminUserVO) => {
    setSelectedAdmin(admin);
    setManageRegionsDialogOpen(true);
  };

  // Table columns definition
  const columns: ColumnDef<API.AdminUserVO>[] = [
    {
      id: "id",
      header: "ID",
      accessorKey: "id",
      enableSorting: true,
    },
    {
      id: "username",
      header: "用户名",
      accessorKey: "username",
      enableSorting: true,
    },
    {
      id: "regionCount",
      header: "管理区域数",
      cell: ({ row }) => row.original.regionIds?.split(",").length || 0,
      enableSorting: false,
    },
    {
      id: "status",
      header: "状态",
      cell: ({ row }) => {
        return (
          <Badge
            variant={
              row.original.status === ActiveStatus.ACTIVE
                ? "default"
                : "secondary"
            }
          >
            {row.original.status === ActiveStatus.ACTIVE ? "启用" : "禁用"}
          </Badge>
        );
      },
      enableSorting: false,
    },
    {
      id: "createdAt",
      header: "创建时间",
      cell: ({ row }) =>
        row.original.createdAt
          ? formatDate(row.original.createdAt, "yyyy-MM-dd HH:mm:ss")
          : "",
      enableSorting: true,
    },
    {
      id: "updatedAt",
      header: "更新时间",
      cell: ({ row }) =>
        row.original.updatedAt
          ? formatDate(row.original.updatedAt, "yyyy-MM-dd HH:mm:ss")
          : "",
      enableSorting: true,
    },
  ];

  // Table row actions
  const actions = [
    {
      label: "管理区域",
      icon: <MapPin />,
      onClick: (row: API.AdminUserVO) => {
        openManageRegionsDialog(row);
      },
    },
    {
      label: (row: API.AdminUserVO) => {
        return row.status === ActiveStatus.ACTIVE ? "禁用" : "启用";
      },
      icon: <Ban />,
      onClick: (row: API.AdminUserVO) => {},
    },
  ];

  // Table toolbar actions
  const toolbars = [
    {
      label: "添加管理员",
      icon: <UserRoundCog />,
      onClick: () => setAddAdminDialogOpen(true),
    },
  ];

  return (
    <>
      <AddAdminDialog
        open={addAdminDialogOpen}
        onOpenChange={(open) => {
          setAddAdminDialogOpen(open);
          // Reset form when dialog closes
          if (!open) {
            formMethods.reset(defaultAdminValues);
          }
        }}
        onSubmit={handleSubmit}
        formMethods={formMethods}
      />

      <ManageRegionsDialog
        open={manageRegionsDialogOpen}
        onOpenChange={(open) => {
          setManageRegionsDialogOpen(open);
          if (!open) {
            setSelectedAdmin(null);
          }
        }}
        admin={selectedAdmin}
        onAddRegion={handleAddRegion}
        onRemoveRegion={handleRemoveRegion}
      />

      <DataTable<API.AdminUserVO>
        title="加盟商管理"
        loading={isLoading}
        columns={columns}
        actions={actions}
        data={admins}
        toolbars={toolbars}
        page={page}
        onPageChange={(pageNumber) => {
          setPage({ ...page, pageNumber });
        }}
        filter={filter}
        onFilterChange={(filter) => {
          setFilter(filter);
          fetchAdmins();
        }}
      />
    </>
  );
}
```

[data-form.tsx](mdc:src/components/data-form.tsx) 是我们自己封装的页面dialog 使用示例如下

```
import { DialogForm, FieldConfig } from "@/components/data-form";
import { ActiveStatus } from "@/types/enum";
import { z } from "zod";

// Define the admin form schema
export const addAdminForm = z.object({
  username: z.string().min(1, "用户名不能为空"),
  password: z.string().min(1, "密码不能为空"),
  status: z.nativeEnum(ActiveStatus),
});

export type AdminFormValues = z.infer<typeof addAdminForm>;

// Default form values
export const defaultAdminValues: AdminFormValues = {
  username: "",
  password: "",
  status: ActiveStatus.ACTIVE,
};

// Define field configurations for the form
export const fieldConfigs: Record<string, FieldConfig> = {
  username: {
    type: "input",
    label: "用户名",
    placeholder: "请输入用户名",
  },
  password: {
    type: "input",
    label: "密码",
    placeholder: "请输入密码",
  },
  status: {
    type: "select",
    label: "状态",
    placeholder: "请选择状态",
    options: [
      { label: "启用", value: ActiveStatus.ACTIVE },
      { label: "禁用", value: ActiveStatus.INACTIVE },
    ],
  },
};

interface AddAdminDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (data: AdminFormValues) => void;
  formMethods: any; // Using any for simplicity, but you could type this properly
}

export function AddAdminDialog({
  open,
  onOpenChange,
  onSubmit,
  formMethods,
}: AddAdminDialogProps) {
  return (
    <DialogForm
      title="添加管理员"
      description="请填写管理员信息"
      open={open}
      onOpenChange={onOpenChange}
      onSubmit={onSubmit}
      form={addAdminForm}
      defaultValues={defaultAdminValues}
      fieldConfigs={fieldConfigs}
      formMethods={formMethods}
      submitButtonText="添加"
      cancelButtonText="取消"
      showCancelButton={true}
      fieldOrder={["username", "password", "status"]}
    />
  );
}
```

```
import { DialogForm, FieldConfig } from "@/components/data-form";
import { AnnouncementType } from "@/types/enum";
import { z } from "zod";

// Define the announcement form schema
export const addAnnouncementForm = z.object({
  title: z.string().min(1, "标题不能为空"),
  content: z.string().min(1, "内容不能为空"),
  type: z.enum([
    AnnouncementType.ALL,
    AnnouncementType.HOTEL,
    AnnouncementType.WORKER,
  ]),
});

export type AnnouncementFormValues = z.infer<typeof addAnnouncementForm>;

// Default form values
export const defaultAnnouncementValues: AnnouncementFormValues = {
  title: "",
  content: "",
  type: AnnouncementType.ALL,
};

// Define field configurations for the form
export const fieldConfigs: Record<string, FieldConfig> = {
  title: {
    type: "input",
    label: "标题",
    placeholder: "请输入公告标题",
  },
  content: {
    type: "textarea",
    label: "内容",
    placeholder: "请输入公告内容",
  },
  type: {
    type: "select",
    label: "公告类型",
    placeholder: "请选择公告类型",
    options: [
      { label: "全部", value: AnnouncementType.ALL },
      { label: "酒店", value: AnnouncementType.HOTEL },
      { label: "工作人员", value: AnnouncementType.WORKER },
    ],
  },
};

interface AddAnnouncementDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (data: AnnouncementFormValues) => void;
  formMethods: any; // Using any for simplicity, but you could type this properly
  isEditing?: boolean;
}

export function AddAnnouncementDialog({
  open,
  onOpenChange,
  onSubmit,
  formMethods,
  isEditing = false,
}: AddAnnouncementDialogProps) {
  return (
    <DialogForm
      title={isEditing ? "编辑公告" : "添加公告"}
      description={isEditing ? "请填写公告信息" : "请填写公告信息"}
      open={open}
      onOpenChange={onOpenChange}
      onSubmit={onSubmit}
      form={addAnnouncementForm}
      defaultValues={defaultAnnouncementValues}
      fieldConfigs={fieldConfigs}
      formMethods={formMethods}
      submitButtonText={isEditing ? "保存" : "添加"}
      cancelButtonText="取消"
      showCancelButton={true}
      fieldOrder={["title", "content", "type"]}
    />
  );
}
```

# api

本项目的 api 文档存放在 src/services/api 中