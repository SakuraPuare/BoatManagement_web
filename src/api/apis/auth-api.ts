// tslint:disable
/**
 * 基于物联网的共享智能电动游船管理平台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthRequestDto } from '../models';
// @ts-ignore
import { NameRequestDto } from '../models';
// @ts-ignore
import { ResponseBoolean } from '../models';
// @ts-ignore
import { ResponseString } from '../models';
// @ts-ignore
import { ResponseTokenVo } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check Username availability
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvailability: async (nameRequestDto?: NameRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/availability`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof nameRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(nameRequestDto !== undefined ? nameRequestDto : {}) : (nameRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check Username availability
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvailability_1: async (nameRequestDto?: NameRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/availability`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof nameRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(nameRequestDto !== undefined ? nameRequestDto : {}) : (nameRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login by code
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginByCode: async (authRequestDto?: AuthRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequestDto !== undefined ? authRequestDto : {}) : (authRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login by code
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginByCode_2: async (authRequestDto?: AuthRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequestDto !== undefined ? authRequestDto : {}) : (authRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithPassword: async (authRequestDto?: AuthRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequestDto !== undefined ? authRequestDto : {}) : (authRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithPassword_3: async (authRequestDto?: AuthRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequestDto !== undefined ? authRequestDto : {}) : (authRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPassword: async (authRequestDto?: AuthRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequestDto !== undefined ? authRequestDto : {}) : (authRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPassword_4: async (authRequestDto?: AuthRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authRequestDto !== undefined ? authRequestDto : {}) : (authRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send code
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCode: async (nameRequestDto?: NameRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof nameRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(nameRequestDto !== undefined ? nameRequestDto : {}) : (nameRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send code
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCode_5: async (nameRequestDto?: NameRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof nameRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(nameRequestDto !== undefined ? nameRequestDto : {}) : (nameRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check Username availability
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAvailability(nameRequestDto?: NameRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseBoolean>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).checkAvailability(nameRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check Username availability
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAvailability_1(nameRequestDto?: NameRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseBoolean>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).checkAvailability_1(nameRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login by code
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginByCode(authRequestDto?: AuthRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenVo>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).loginByCode(authRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login by code
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginByCode_2(authRequestDto?: AuthRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenVo>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).loginByCode_2(authRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithPassword(authRequestDto?: AuthRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenVo>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).loginWithPassword(authRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithPassword_3(authRequestDto?: AuthRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenVo>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).loginWithPassword_3(authRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWithPassword(authRequestDto?: AuthRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenVo>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).registerWithPassword(authRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWithPassword_4(authRequestDto?: AuthRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTokenVo>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).registerWithPassword_4(authRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Send code
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCode(nameRequestDto?: NameRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseString>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).sendCode(nameRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Send code
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCode_5(nameRequestDto?: NameRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseString>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).sendCode_5(nameRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Check Username availability
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvailability(nameRequestDto?: NameRequestDto, options?: any): AxiosPromise<ResponseBoolean> {
            return AuthApiFp(configuration).checkAvailability(nameRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check Username availability
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvailability_1(nameRequestDto?: NameRequestDto, options?: any): AxiosPromise<ResponseBoolean> {
            return AuthApiFp(configuration).checkAvailability_1(nameRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login by code
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginByCode(authRequestDto?: AuthRequestDto, options?: any): AxiosPromise<ResponseTokenVo> {
            return AuthApiFp(configuration).loginByCode(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login by code
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginByCode_2(authRequestDto?: AuthRequestDto, options?: any): AxiosPromise<ResponseTokenVo> {
            return AuthApiFp(configuration).loginByCode_2(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithPassword(authRequestDto?: AuthRequestDto, options?: any): AxiosPromise<ResponseTokenVo> {
            return AuthApiFp(configuration).loginWithPassword(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithPassword_3(authRequestDto?: AuthRequestDto, options?: any): AxiosPromise<ResponseTokenVo> {
            return AuthApiFp(configuration).loginWithPassword_3(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPassword(authRequestDto?: AuthRequestDto, options?: any): AxiosPromise<ResponseTokenVo> {
            return AuthApiFp(configuration).registerWithPassword(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {AuthRequestDto} [authRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPassword_4(authRequestDto?: AuthRequestDto, options?: any): AxiosPromise<ResponseTokenVo> {
            return AuthApiFp(configuration).registerWithPassword_4(authRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send code
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCode(nameRequestDto?: NameRequestDto, options?: any): AxiosPromise<ResponseString> {
            return AuthApiFp(configuration).sendCode(nameRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send code
         * @param {NameRequestDto} [nameRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCode_5(nameRequestDto?: NameRequestDto, options?: any): AxiosPromise<ResponseString> {
            return AuthApiFp(configuration).sendCode_5(nameRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Check Username availability
     * @param {NameRequestDto} [nameRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public checkAvailability(nameRequestDto?: NameRequestDto, options?: any) {
        return AuthApiFp(this.configuration).checkAvailability(nameRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check Username availability
     * @param {NameRequestDto} [nameRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public checkAvailability_1(nameRequestDto?: NameRequestDto, options?: any) {
        return AuthApiFp(this.configuration).checkAvailability_1(nameRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login by code
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginByCode(authRequestDto?: AuthRequestDto, options?: any) {
        return AuthApiFp(this.configuration).loginByCode(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login by code
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginByCode_2(authRequestDto?: AuthRequestDto, options?: any) {
        return AuthApiFp(this.configuration).loginByCode_2(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginWithPassword(authRequestDto?: AuthRequestDto, options?: any) {
        return AuthApiFp(this.configuration).loginWithPassword(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginWithPassword_3(authRequestDto?: AuthRequestDto, options?: any) {
        return AuthApiFp(this.configuration).loginWithPassword_3(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerWithPassword(authRequestDto?: AuthRequestDto, options?: any) {
        return AuthApiFp(this.configuration).registerWithPassword(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {AuthRequestDto} [authRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerWithPassword_4(authRequestDto?: AuthRequestDto, options?: any) {
        return AuthApiFp(this.configuration).registerWithPassword_4(authRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send code
     * @param {NameRequestDto} [nameRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public sendCode(nameRequestDto?: NameRequestDto, options?: any) {
        return AuthApiFp(this.configuration).sendCode(nameRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send code
     * @param {NameRequestDto} [nameRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public sendCode_5(nameRequestDto?: NameRequestDto, options?: any) {
        return AuthApiFp(this.configuration).sendCode_5(nameRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

}
