// tslint:disable
/**
 * 基于物联网的共享智能电动游船管理平台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Boat } from '../models';
// @ts-ignore
import { PageBoat } from '../models';
/**
 * BoatControllerApi - axios parameter creator
 * @export
 */
export const BoatControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getInfo_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo5: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInfo5.');
            }
            const localVarPath = `/boats/getInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInfo_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo5_1: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInfo5_1.');
            }
            const localVarPath = `/boats/getInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_5
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list5: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_5
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list5_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary page_5
         * @param {Array<Boat>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page5: async (records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (records) {
                localVarQueryParameter['records'] = records;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (totalPage !== undefined) {
                localVarQueryParameter['totalPage'] = totalPage;
            }

            if (totalRow !== undefined) {
                localVarQueryParameter['totalRow'] = totalRow;
            }

            if (optimizeCountQuery !== undefined) {
                localVarQueryParameter['optimizeCountQuery'] = optimizeCountQuery;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary page_5
         * @param {Array<Boat>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page5_3: async (records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (records) {
                localVarQueryParameter['records'] = records;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (totalPage !== undefined) {
                localVarQueryParameter['totalPage'] = totalPage;
            }

            if (totalRow !== undefined) {
                localVarQueryParameter['totalRow'] = totalRow;
            }

            if (optimizeCountQuery !== undefined) {
                localVarQueryParameter['optimizeCountQuery'] = optimizeCountQuery;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove5: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove5.');
            }
            const localVarPath = `/boats/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove5_4: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove5_4.');
            }
            const localVarPath = `/boats/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save5: async (boat?: Boat, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/save`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boat !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boat !== undefined ? boat : {}) : (boat || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save5_5: async (boat?: Boat, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/save`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boat !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boat !== undefined ? boat : {}) : (boat || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5: async (boat?: Boat, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boat !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boat !== undefined ? boat : {}) : (boat || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5_6: async (boat?: Boat, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boats/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof boat !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(boat !== undefined ? boat : {}) : (boat || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoatControllerApi - functional programming interface
 * @export
 */
export const BoatControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getInfo_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo5(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boat>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).getInfo5(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getInfo_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo5_1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Boat>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).getInfo5_1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list_5
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list5(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Boat>>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).list5(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list_5
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list5_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Boat>>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).list5_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary page_5
         * @param {Array<Boat>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page5(records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoat>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).page5(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary page_5
         * @param {Array<Boat>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page5_3(records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBoat>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).page5_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove5(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).remove5(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove5_4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).remove5_4(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary save_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save5(boat?: Boat, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).save5(boat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary save_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save5_5(boat?: Boat, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).save5_5(boat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update5(boat?: Boat, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).update5(boat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update5_6(boat?: Boat, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await BoatControllerApiAxiosParamCreator(configuration).update5_6(boat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BoatControllerApi - factory interface
 * @export
 */
export const BoatControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getInfo_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo5(id: number, options?: any): AxiosPromise<Boat> {
            return BoatControllerApiFp(configuration).getInfo5(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInfo_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo5_1(id: number, options?: any): AxiosPromise<Boat> {
            return BoatControllerApiFp(configuration).getInfo5_1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_5
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list5(options?: any): AxiosPromise<Array<Boat>> {
            return BoatControllerApiFp(configuration).list5(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_5
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list5_2(options?: any): AxiosPromise<Array<Boat>> {
            return BoatControllerApiFp(configuration).list5_2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary page_5
         * @param {Array<Boat>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page5(records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): AxiosPromise<PageBoat> {
            return BoatControllerApiFp(configuration).page5(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary page_5
         * @param {Array<Boat>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page5_3(records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): AxiosPromise<PageBoat> {
            return BoatControllerApiFp(configuration).page5_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove5(id: number, options?: any): AxiosPromise<boolean> {
            return BoatControllerApiFp(configuration).remove5(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove_5
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove5_4(id: number, options?: any): AxiosPromise<boolean> {
            return BoatControllerApiFp(configuration).remove5_4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save5(boat?: Boat, options?: any): AxiosPromise<boolean> {
            return BoatControllerApiFp(configuration).save5(boat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save5_5(boat?: Boat, options?: any): AxiosPromise<boolean> {
            return BoatControllerApiFp(configuration).save5_5(boat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5(boat?: Boat, options?: any): AxiosPromise<boolean> {
            return BoatControllerApiFp(configuration).update5(boat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_5
         * @param {Boat} [boat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5_6(boat?: Boat, options?: any): AxiosPromise<boolean> {
            return BoatControllerApiFp(configuration).update5_6(boat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoatControllerApi - object-oriented interface
 * @export
 * @class BoatControllerApi
 * @extends {BaseAPI}
 */
export class BoatControllerApi extends BaseAPI {
    /**
     * 
     * @summary getInfo_5
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public getInfo5(id: number, options?: any) {
        return BoatControllerApiFp(this.configuration).getInfo5(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInfo_5
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public getInfo5_1(id: number, options?: any) {
        return BoatControllerApiFp(this.configuration).getInfo5_1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public list5(options?: any) {
        return BoatControllerApiFp(this.configuration).list5(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public list5_2(options?: any) {
        return BoatControllerApiFp(this.configuration).list5_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary page_5
     * @param {Array<Boat>} [records] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [totalPage] 
     * @param {number} [totalRow] 
     * @param {boolean} [optimizeCountQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public page5(records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any) {
        return BoatControllerApiFp(this.configuration).page5(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary page_5
     * @param {Array<Boat>} [records] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [totalPage] 
     * @param {number} [totalRow] 
     * @param {boolean} [optimizeCountQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public page5_3(records?: Array<Boat>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any) {
        return BoatControllerApiFp(this.configuration).page5_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove_5
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public remove5(id: number, options?: any) {
        return BoatControllerApiFp(this.configuration).remove5(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove_5
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public remove5_4(id: number, options?: any) {
        return BoatControllerApiFp(this.configuration).remove5_4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save_5
     * @param {Boat} [boat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public save5(boat?: Boat, options?: any) {
        return BoatControllerApiFp(this.configuration).save5(boat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save_5
     * @param {Boat} [boat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public save5_5(boat?: Boat, options?: any) {
        return BoatControllerApiFp(this.configuration).save5_5(boat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_5
     * @param {Boat} [boat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public update5(boat?: Boat, options?: any) {
        return BoatControllerApiFp(this.configuration).update5(boat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_5
     * @param {Boat} [boat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoatControllerApi
     */
    public update5_6(boat?: Boat, options?: any) {
        return BoatControllerApiFp(this.configuration).update5_6(boat, options).then((request) => request(this.axios, this.basePath));
    }

}
