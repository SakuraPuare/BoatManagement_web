// tslint:disable
/**
 * 基于物联网的共享智能电动游船管理平台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Dock } from '../models';
// @ts-ignore
import { PageDock } from '../models';
/**
 * DockControllerApi - axios parameter creator
 * @export
 */
export const DockControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getInfo_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo4: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInfo4.');
            }
            const localVarPath = `/docks/getInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInfo_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo4_1: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInfo4_1.');
            }
            const localVarPath = `/docks/getInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_4
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list4: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list_4
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list4_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary page_4
         * @param {Array<Dock>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page4: async (records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (records) {
                localVarQueryParameter['records'] = records;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (totalPage !== undefined) {
                localVarQueryParameter['totalPage'] = totalPage;
            }

            if (totalRow !== undefined) {
                localVarQueryParameter['totalRow'] = totalRow;
            }

            if (optimizeCountQuery !== undefined) {
                localVarQueryParameter['optimizeCountQuery'] = optimizeCountQuery;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary page_4
         * @param {Array<Dock>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page4_3: async (records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (records) {
                localVarQueryParameter['records'] = records;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (totalPage !== undefined) {
                localVarQueryParameter['totalPage'] = totalPage;
            }

            if (totalRow !== undefined) {
                localVarQueryParameter['totalRow'] = totalRow;
            }

            if (optimizeCountQuery !== undefined) {
                localVarQueryParameter['optimizeCountQuery'] = optimizeCountQuery;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove4: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove4.');
            }
            const localVarPath = `/docks/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove4_4: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove4_4.');
            }
            const localVarPath = `/docks/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save4: async (dock?: Dock, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/save`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dock !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dock !== undefined ? dock : {}) : (dock || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save4_5: async (dock?: Dock, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/save`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dock !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dock !== undefined ? dock : {}) : (dock || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4: async (dock?: Dock, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dock !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dock !== undefined ? dock : {}) : (dock || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4_6: async (dock?: Dock, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docks/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dock !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dock !== undefined ? dock : {}) : (dock || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DockControllerApi - functional programming interface
 * @export
 */
export const DockControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getInfo_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dock>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).getInfo4(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getInfo_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo4_1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dock>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).getInfo4_1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list_4
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list4(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dock>>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).list4(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list_4
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list4_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dock>>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).list4_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary page_4
         * @param {Array<Dock>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page4(records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDock>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).page4(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary page_4
         * @param {Array<Dock>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async page4_3(records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDock>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).page4_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).remove4(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove4_4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).remove4_4(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary save_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save4(dock?: Dock, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).save4(dock, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary save_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save4_5(dock?: Dock, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).save4_5(dock, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(dock?: Dock, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).update4(dock, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4_6(dock?: Dock, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DockControllerApiAxiosParamCreator(configuration).update4_6(dock, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DockControllerApi - factory interface
 * @export
 */
export const DockControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getInfo_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo4(id: number, options?: any): AxiosPromise<Dock> {
            return DockControllerApiFp(configuration).getInfo4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInfo_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo4_1(id: number, options?: any): AxiosPromise<Dock> {
            return DockControllerApiFp(configuration).getInfo4_1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_4
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list4(options?: any): AxiosPromise<Array<Dock>> {
            return DockControllerApiFp(configuration).list4(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list_4
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list4_2(options?: any): AxiosPromise<Array<Dock>> {
            return DockControllerApiFp(configuration).list4_2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary page_4
         * @param {Array<Dock>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page4(records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): AxiosPromise<PageDock> {
            return DockControllerApiFp(configuration).page4(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary page_4
         * @param {Array<Dock>} [records] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [totalPage] 
         * @param {number} [totalRow] 
         * @param {boolean} [optimizeCountQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        page4_3(records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any): AxiosPromise<PageDock> {
            return DockControllerApiFp(configuration).page4_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove4(id: number, options?: any): AxiosPromise<boolean> {
            return DockControllerApiFp(configuration).remove4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove_4
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove4_4(id: number, options?: any): AxiosPromise<boolean> {
            return DockControllerApiFp(configuration).remove4_4(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save4(dock?: Dock, options?: any): AxiosPromise<boolean> {
            return DockControllerApiFp(configuration).save4(dock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save4_5(dock?: Dock, options?: any): AxiosPromise<boolean> {
            return DockControllerApiFp(configuration).save4_5(dock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4(dock?: Dock, options?: any): AxiosPromise<boolean> {
            return DockControllerApiFp(configuration).update4(dock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update_4
         * @param {Dock} [dock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4_6(dock?: Dock, options?: any): AxiosPromise<boolean> {
            return DockControllerApiFp(configuration).update4_6(dock, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DockControllerApi - object-oriented interface
 * @export
 * @class DockControllerApi
 * @extends {BaseAPI}
 */
export class DockControllerApi extends BaseAPI {
    /**
     * 
     * @summary getInfo_4
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public getInfo4(id: number, options?: any) {
        return DockControllerApiFp(this.configuration).getInfo4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInfo_4
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public getInfo4_1(id: number, options?: any) {
        return DockControllerApiFp(this.configuration).getInfo4_1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public list4(options?: any) {
        return DockControllerApiFp(this.configuration).list4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list_4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public list4_2(options?: any) {
        return DockControllerApiFp(this.configuration).list4_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary page_4
     * @param {Array<Dock>} [records] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [totalPage] 
     * @param {number} [totalRow] 
     * @param {boolean} [optimizeCountQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public page4(records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any) {
        return DockControllerApiFp(this.configuration).page4(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary page_4
     * @param {Array<Dock>} [records] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [totalPage] 
     * @param {number} [totalRow] 
     * @param {boolean} [optimizeCountQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public page4_3(records?: Array<Dock>, pageNumber?: number, pageSize?: number, totalPage?: number, totalRow?: number, optimizeCountQuery?: boolean, options?: any) {
        return DockControllerApiFp(this.configuration).page4_3(records, pageNumber, pageSize, totalPage, totalRow, optimizeCountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove_4
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public remove4(id: number, options?: any) {
        return DockControllerApiFp(this.configuration).remove4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove_4
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public remove4_4(id: number, options?: any) {
        return DockControllerApiFp(this.configuration).remove4_4(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save_4
     * @param {Dock} [dock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public save4(dock?: Dock, options?: any) {
        return DockControllerApiFp(this.configuration).save4(dock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save_4
     * @param {Dock} [dock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public save4_5(dock?: Dock, options?: any) {
        return DockControllerApiFp(this.configuration).save4_5(dock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_4
     * @param {Dock} [dock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public update4(dock?: Dock, options?: any) {
        return DockControllerApiFp(this.configuration).update4(dock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update_4
     * @param {Dock} [dock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockControllerApi
     */
    public update4_6(dock?: Dock, options?: any) {
        return DockControllerApiFp(this.configuration).update4_6(dock, options).then((request) => request(this.axios, this.basePath));
    }

}
